# Configuration file for the Sphinx documentation builder.
# SSA-27: Auto-generated API Documentation Setup

import os
import sys
from pathlib import Path

# -- Path setup --------------------------------------------------------------

# Add the project root to Python path for autodoc
project_root = Path(__file__).parent.parent.parent
sys.path.insert(0, str(project_root))

# Add all main packages to path
for package in ['dominio', 'aplicacion', 'infraestructura', 'presentacion', 'config']:
    package_path = project_root / package
    if package_path.exists():
        sys.path.insert(0, str(package_path))

# -- Project information -----------------------------------------------------

project = 'SenialSOLIDApp'
copyright = '2025, Victor Valotto'
author = 'Victor Valotto'
release = '1.4.0'
version = '1.4.0'

# -- General configuration ---------------------------------------------------

extensions = [
    'sphinx.ext.autodoc',
    'sphinx.ext.autosummary',
    'sphinx.ext.viewcode',
    'sphinx.ext.napoleon',
    'sphinx.ext.intersphinx',
    'sphinx.ext.todo',
    'sphinx.ext.coverage',
    'sphinx.ext.githubpages',
]

# Templates path
templates_path = ['_templates']

# List of patterns to exclude when looking for source files
exclude_patterns = ['_build', 'Thumbs.db', '.DS_Store']

# The suffix of source filenames
source_suffix = '.rst'

# The master toctree document
master_doc = 'index'

# The language for content autogenerated by Sphinx
language = 'es'

# -- Options for HTML output -------------------------------------------------

html_theme = 'sphinx_rtd_theme'
html_theme_options = {
    'canonical_url': '',
    'analytics_id': '',
    'logo_only': False,
    'display_version': True,
    'prev_next_buttons_location': 'bottom',
    'style_external_links': False,
    'style_nav_header_background': '#2980B9',
    # Toc options
    'collapse_navigation': True,
    'sticky_navigation': True,
    'navigation_depth': 4,
    'includehidden': True,
    'titles_only': False
}

html_static_path = ['_static']
html_css_files = ['custom.css']

# -- Extension configuration -------------------------------------------------

# -- Options for autodoc ----------------------------------------------------
autodoc_default_options = {
    'members': True,
    'member-order': 'bysource',
    'special-members': '__init__',
    'undoc-members': True,
    'exclude-members': '__weakref__'
}

# Automatically extract typehints
autodoc_typehints = 'description'
autodoc_typehints_description_target = 'documented'

# -- Options for autosummary ------------------------------------------------
autosummary_generate = True

# -- Options for napoleon (Google/NumPy style docstrings) -------------------
napoleon_google_docstring = True
napoleon_numpy_docstring = False
napoleon_include_init_with_doc = False
napoleon_include_private_with_doc = False
napoleon_include_special_with_doc = True
napoleon_use_admonition_for_examples = False
napoleon_use_admonition_for_notes = False
napoleon_use_admonition_for_references = False
napoleon_use_ivar = False
napoleon_use_param = True
napoleon_use_rtype = True
napoleon_preprocess_types = False
napoleon_type_aliases = None
napoleon_attr_annotations = True

# -- Options for intersphinx ------------------------------------------------
intersphinx_mapping = {
    'python': ('https://docs.python.org/3', None),
    'flask': ('https://flask.palletsprojects.com/en/2.3.x/', None),
}

# -- Options for todo extension ----------------------------------------------
todo_include_todos = True

# -- Custom configuration for SenialSOLIDApp --------------------------------

# DDD Architecture documentation structure
html_context = {
    'ddd_layers': [
        ('Domain Layer', 'dominio'),
        ('Application Layer', 'aplicacion'),
        ('Infrastructure Layer', 'infraestructura'),
        ('Presentation Layer', 'presentacion'),
        ('Configuration', 'config'),
    ]
}

# Custom roles for DDD documentation
rst_prolog = """
.. role:: domain
.. role:: application
.. role:: infrastructure
.. role:: presentation
"""

# -- SSA-27 Specific Configuration ------------------------------------------

# Documentation standards enforcement
nitpicky = True
nitpick_ignore = [
    ('py:class', 'typing.Union'),
    ('py:class', 'typing.Optional'),
    ('py:class', 'typing.List'),
    ('py:class', 'typing.Dict'),
    ('py:class', 'typing.Any'),
]

# Quality gates for documentation
coverage_show_missing_items = True
coverage_skip_undoc_in_source = False

# SSA-25 Integration: Link to quality metrics
html_theme_options.update({
    'analytics_anonymize_ip': False,
    'logo_only': False,
    'display_version': True,
})

# Add custom CSS for SSA-27 documentation standards
html_css_files.extend([
    'ddd-styles.css',
    'quality-indicators.css'
])

# Configure API documentation generation
def setup(app):
    """Sphinx app setup for SSA-27 documentation standards."""
    app.add_css_file('custom.css')

    # Add custom directives for DDD documentation
    from sphinx.util.docutils import docutils_namespace
    with docutils_namespace():
        app.add_directive('business-rule', BusinessRuleDirective)
        app.add_directive('domain-event', DomainEventDirective)
        app.add_directive('use-case', UseCaseDirective)

# Custom directives for DDD documentation
from docutils import nodes
from docutils.parsers.rst import Directive
from sphinx.util.docutils import SphinxDirective

class BusinessRuleDirective(SphinxDirective):
    """Custom directive for documenting business rules."""
    has_content = True
    required_arguments = 1

    def run(self):
        rule_name = self.arguments[0]
        content = '\n'.join(self.content)

        container = nodes.container()
        container['classes'].append('business-rule')

        title = nodes.title(text=f"Business Rule: {rule_name}")
        content_node = nodes.paragraph(text=content)

        container += title
        container += content_node

        return [container]

class DomainEventDirective(SphinxDirective):
    """Custom directive for documenting domain events."""
    has_content = True
    required_arguments = 1

    def run(self):
        event_name = self.arguments[0]
        content = '\n'.join(self.content)

        container = nodes.container()
        container['classes'].append('domain-event')

        title = nodes.title(text=f"Domain Event: {event_name}")
        content_node = nodes.paragraph(text=content)

        container += title
        container += content_node

        return [container]

class UseCaseDirective(SphinxDirective):
    """Custom directive for documenting use cases."""
    has_content = True
    required_arguments = 1

    def run(self):
        use_case_name = self.arguments[0]
        content = '\n'.join(self.content)

        container = nodes.container()
        container['classes'].append('use-case')

        title = nodes.title(text=f"Use Case: {use_case_name}")
        content_node = nodes.paragraph(text=content)

        container += title
        container += content_node

        return [container]